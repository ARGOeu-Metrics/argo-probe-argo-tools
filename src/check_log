#!/usr/bin/python3
import argparse
import sys

from argo_probe_argo_tools.log import Log, CriticalException, WarnException
from argo_probe_argo_tools.nagios import Nagios


def main():
    nagios = Nagios()

    parser = argparse.ArgumentParser(
        "Probe that checks app log for errors", add_help=False
    )
    required = parser.add_argument_group("required arguments")
    optional = parser.add_argument_group("optional arguments")
    required.add_argument(
        "-f", "--file", dest="file", type=str, help="location of log file"
    )
    required.add_argument(
        "-A", "--app", dest="app", type=str,
        help="application whose log is being checked"
    )
    required.add_argument(
        "-m", "--message", dest="message", type=str,
        help="(part of) OK message expected in the log"
    )
    required.add_argument(
        "-a", "--age", dest="age", default=2, type=int,
        help="maximum acceptable log age (default: 2 h)"
    )
    required.add_argument(
        "-t", "--timeout", dest="timeout", default=90, type=float,
        help="timeout (default 90 s)"
    )
    optional.add_argument(
        "-h", "--help", action="help", default=argparse.SUPPRESS,
        help="Show this help message and exit"
    )
    args = parser.parse_args()

    try:
        log = Log(
            app=args.app, logfile=args.file, age=args.age,
            message=args.message, timeout=args.timeout
        )

        if log.check_file_exists():
            if log.check_format_ok():
                nagios.ok(log.check_messages())

            else:
                nagios.critical("Wrong log file format")

        else:
            nagios.critical(f"Log file {args.file} does not exist")

    except CriticalException as e:
        nagios.critical(str(e))

    except WarnException as e:
        nagios.warning(str(e))

    except TimeoutError:
        nagios.critical("Timeout")

    except Exception as e:
        nagios.unknown(str(e))

    print(nagios.get_msg())
    sys.exit(nagios.get_code())


if __name__ == "__main__":
    main()
